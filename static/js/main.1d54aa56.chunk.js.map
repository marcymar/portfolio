{"version":3,"sources":["pages/Home/Home.js","pages/Portfolio/Portfolio.js","pages/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["items","src","altText","caption","key","Home","UncontrolledCarousel","Jumbotron","className","Portfolio","Card","CardBody","CardTitle","CardSubtitle","width","alt","CardText","CardLink","href","Contact","App","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","target","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d54aa56.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  Jumbotron,\r\n  UncontrolledCarousel\r\n} from 'reactstrap'\r\n\r\nconst items = [\r\n  {\r\n    src: 'employeemanager.png',\r\n    altText: 'Employee Manager',\r\n    caption: 'Employee Manager',\r\n    key: '1'\r\n  },\r\n  {\r\n    src: 'project1screencap.png',\r\n    altText: 'NutraPrep',\r\n    caption: 'NutraPrep',\r\n    key: '2'\r\n  },\r\n  {\r\n    src: 'tractivity.png',\r\n    altText: 'TrActivity',\r\n    caption: 'TrActiviy',\r\n    key: '3'\r\n  }\r\n]\r\n\r\nconst Home = () => {\r\n  return (\r\n<div>\r\n      <UncontrolledCarousel items={items} />\r\n      <Jumbotron>\r\n        <h1 className=\"display-3\">Hello, welcome to my portfolio!</h1>\r\n        <p className=\"lead\">Hi!  My name is Marcella Luz Ash and I am currently a student learning the ins and outs of coding.  I enjoy playing video games, photography and building computers. </p>\r\n      </Jumbotron>\r\n      \r\n\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport {\r\n  Card,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardLink,\r\n  CardSubtitle\r\n} from 'reactstrap'\r\n\r\nconst Portfolio = () => {\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>Creating a Site Utilizing APIs</CardTitle>\r\n          <CardSubtitle>NutraPrep</CardSubtitle>\r\n        </CardBody>\r\n        <img width=\"100%\" src=\"project1screencap.png\" alt=\"NutraPrep\" />\r\n        <CardBody>\r\n          <CardText>For the first project of my coding course we were tasked with creating a web application of our choosing utilizing  web APIs and applying all we had learned so far in the course.  Myself and a team of four others were able to put together an app where you can find and check nutrional values of foods.  It was a challending but rewarding project.</CardText>\r\n        </CardBody>\r\n        <CardLink href=\"https://nicholasd-uci.github.io/manhattanProject/\">App Link</CardLink>\r\n      </Card>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>Node Express App</CardTitle>\r\n          <CardSubtitle>Eat-Da-Burger</CardSubtitle>\r\n        </CardBody>\r\n        <img width=\"100%\" src=\"eatdaburger(2).png\" alt=\"Eat-Da-Burger\" />\r\n        <CardBody>\r\n          <CardText>This app utilizes MySQL, Express, Handlebars and an ORM.  With it you can log the names of burgers and them mark them as eaten.</CardText>\r\n        </CardBody>\r\n        <CardLink href=\"https://frozen-headland-30044.herokuapp.com/\">App Link</CardLink>\r\n      </Card>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>Project 2</CardTitle>\r\n          <CardSubtitle>TrActivity</CardSubtitle>\r\n        </CardBody>\r\n        <img width=\"100%\" src=\"tractivity.png\" alt=\"TrAcktivity\" />\r\n        <CardBody>\r\n          <CardText>The app my team and I made for our second project.  It is an app designed to help people budget for a certain activity they want to do.</CardText>\r\n          </CardBody>\r\n        <CardLink href=\"https://cryptic-savannah-70126.herokuapp.com/index.html\">App Link</CardLink>\r\n      </Card>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>Generator</CardTitle>\r\n          <CardSubtitle>ReadMe Generator</CardSubtitle>\r\n        </CardBody>\r\n        <img width=\"100%\" src=\"readmegenerator.png\" alt=\"ReadMe Generator\" />\r\n        <CardBody>\r\n          <CardText>This app generates a README file according to the input by the user.  It creates a clean and professional looking README page.</CardText>\r\n          <CardLink href=\"https://github.com/marcymar/READMEgenerator\">App Link</CardLink>\r\n        </CardBody>\r\n      </Card>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>Generator</CardTitle>\r\n          <CardSubtitle>Team Builder App</CardSubtitle>\r\n        </CardBody>\r\n        <img width=\"100%\" src=\"teambuild.png\" alt=\"Team Builder\" />\r\n        <CardBody>\r\n          <CardText>With this app managers can make a quick HTML page showcasing the different employees and roles within their company.  All they need to do is enter some basic info for each employee and it generates it all on cards on an HTML page for them.</CardText>\r\n          <CardLink href=\"https://github.com/marcymar/teambuilder\">App Link</CardLink>\r\n        </CardBody>\r\n      </Card>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>Employee Manager App</CardTitle>\r\n          <CardSubtitle>Employee Manager</CardSubtitle>\r\n        </CardBody>\r\n        <img width=\"100%\" src=\"employeemanager.png\" alt=\"Employee Manager\" />\r\n        <CardBody>\r\n          <CardText>Through this app managers can input employee information according to their roles, departments and managers.  This displays the data in neat tables for easy viewing.  They can also add employees, roles or departments, (delete ability is also available).\r\n          </CardText>\r\n          <CardLink href=\"https://github.com/marcymar/employeeTracker\">App Link</CardLink>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Portfolio","import React from 'react'\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle\r\n} from 'reactstrap'\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>How to contact me:</CardTitle>\r\n          <CardSubtitle>Email: marcella@ash-photos.com</CardSubtitle>\r\n          <CardSubtitle>Phone: (714)234-2364</CardSubtitle>\r\n        </CardBody>\r\n      </Card>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Contact","import React, { useState } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport Home from './pages/Home'\r\nimport Portfolio from './pages/Portfolio'\r\nimport Contact from './pages/Contact'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap'\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen)\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">Marcella Luz Ash</NavbarBrand>\r\n          <NavbarToggler onClick={toggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"mr-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink href=\"/\">Home</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"/portfolio\">Portfolio</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"/contact\">Contact</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/marcymar\" target=\"_blank\">GitHub</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/portfolio\" component={Portfolio} />\r\n          <Route path=\"/contact\" component={Contact} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}